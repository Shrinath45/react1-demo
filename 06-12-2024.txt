Style Binding 
Class Binding
Mouse Events
Keyboard Events


                        Timer Events


setTimeout()
clearTimeout()
setInterval()
clearInterval()



setTimeout():

- It handles debounce.
- Debounce is a mechanism where a task is delayed by specified duration or time.
- It lo ads the task into memory but keeps it inactive for specific duration of time.

Syntax:
        setTimeout(function() {}, interval)


EX: debouse-demo.jsx

import react, { useState } from "react";

export function DebounceDemo(){

    const [msg, setMsg] = useState('');

    function v1(){
        setMsg('Volume Incresed by 30%');        
    }
    function v2(){
        setMsg('Volume Incresed by 60%');
    }

    function v3(){
        setMsg('Volume Incresed by 100%');
    }

    function handleVolumeUp(){
        setTimeout(v1, 3000);
        setTimeout(v2, 6000);
        setTimeout(v3, 10000);
    }

    return(
        <div className="container-fluid">
            <button onClick={handleVolumeUp} className="text-light fs-2 bi bi-volume-up bg-success"></button>
            <p className="mt-4 fs-4">{msg}</p>
        </div>
    )

}



clearTimeout(): 

- It removes any task from memory using it's reference ID, which is process ID.
- It requires a memory reference of task in memory.

Syntax:
        clearTimeout(processID);






                        useRef() Hook
                        ---------------

- It is a new hook of React from 17x version.
- It configures a memory, which is intended to use in the process instead of using for rendering output.
- You can store any function or value in memory in memory reference.
- It configures a thread that run in current process and loads the given task.

Syntax:
        let thread = useRef(null);

        thread.current = function(){} | value;


EX: debouse-demo.jsx

import react, { useState } from "react";
import { useRef } from "react";

export function DebounceDemo(){

    const [msg, setMsg] = useState('');

    let thread = useRef(null);

    function v1(){
        setMsg('Volume Increased by 30%');        
    }
    function v2(){
        setMsg('Volume Increased by 60%');
    }

    function v3(){
        setMsg('Volume Increased by 100%');
    }

    function handleVolumeUp(){
        setTimeout(v1, 3000);
        thread.current = setTimeout(v2, 6000);
        setTimeout(v3, 10000);
    }

    function cancel40(){
        clearTimeout(thread.current);
        alert('Canceled');
    }

    return(
        <div className="container-fluid">
            <button onClick={handleVolumeUp} className="text-light fs-2 bi bi-volume-up bg-success"></button>
            <button className="bi bi-volume-off btn btn-primary ms-2" onClick={cancel40}>40%</button>
            <p className="mt-4 fs-4">{msg}</p>
        </div>
    )

}



setInterval():

- It handles "Throttle".
- "Throttle" is a mechanism where a task is loaded into memory and released into the process at regular time intervals.
- It repeats the process until stopped.

Syntax:
        setInterval(function(){}, interval)


clearInterval():

- It removes the task from memory.
- It can cancel the "Throttle".

Syntax:
        clearInterval(processID);