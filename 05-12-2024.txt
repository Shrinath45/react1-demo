            Class Binding 


- You can configure CSS classes dynamically for JSX Elements.

Syntax: 
        <div className={'class1', 'class2'}></div>

- You can use JavaScript template binding to bind dynamic classes with JSX elements.

Syntax:
        <div className={`class1 class2 ${theme}`}></div>


EX:
class-binding.jsx

import { useState } from "react"


export function ClassBinding(){

    const [theme, setTheme] = useState('border-dark');
    const [btnTheme, setbtnTheme] = useState('btn-dark');

    function handleThemeChange(e){
        if(e.target.checked){
            setTheme('border-secondary bg-dark text-light');
            setbtnTheme('btn-light');
        } else {
            setTheme('border-dark');
            setbtnTheme('btn-dark');
        }
    }

    return(
        <div className="container-fluid d-flex justify-content-center align-items-center" style={{height:'100vh'}}>
            <form className={`border border-2 p-4 rounded ${theme}`}>
                <div className="form-switch">
                    <input type="checkbox" onChange={handleThemeChange} className="form-check-input" /> <label className="form-check-lable">Dark Mode</label>
                </div>
                <h3 className="bi bi-person-fill"> User Login </h3>
                <dl>
                    <dt>User Name</dt>
                    <dd><input type="text" className="form-control"/></dd>
                    <dt>Password</dt>
                    <dd><input type="password" className="form-control" /></dd>
                </dl>
                <button className={`btn w-100 ${btnTheme}`}>Login</button>
            </form>
        </div>
    )
}


- Data Binding
- Style Binding
- Class Binding
- Event Binding

EX: mouse-move.jsx

import { useState } from "react"

export function MouseMove()
{
    const [imgStyle, setImgStyle] = useState({position:'', left:'', top:''});

    function handleMouseMove(e)
    {
        setImgStyle({position:'fixed', left:e.clientX + 'px', top:e.clientY + 'px'});
    }

    return(
        <div onMouseMove={handleMouseMove}>
            <div style={{height:'1000px'}}>
                Please move mouse pointer to test
            </div>
            <img style={imgStyle} src="flag.gif" width="50" height="50"/>
        </div>
    )
}




                    Keyboard Events


onKeyUp
onKeyDown
onKeyPress

- Keyup & Keydown are used to handle the chars that user key-in.
- Keypress is used for handling the char ASCI code. [A=65, Z=90, a=97, z=122]
- Key Event Argument provides properties

            keyCode
            charCode
            which 
            shiftKey
            ctrlKey
            altKey


