Class Components
- State in Class
- Mount in Class
- Event Binding in Class
- Style & Class Binding
- API Connections [Axios, Fetch, XMLHttpRequest]




                    Forms in Class Components

- You can't use any 3rd party library that requires hooks to handle forms.
- Hooks are not allowed in class Components.
- You can use a 3rd party library that provides built-in Components for handling form.
- You can use Formik Components like

    <Formik>
    <Form>
    <Field>
    <ErrorMessage>

- You can implement schema validation using "Yup".
- You can write custom validation using methods.

EX:
demo-component.jsx

import React from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as yup from "yup";

export class DemoComponent extends React.PureComponent
{
    constructor(){
        super();
        this.state = {
            
        }
    }

   

    render(){
        return(
            <div className="container-fluid">
              <h3>Register Product</h3>
                          <Formik initialValues={{ProductId:0, Name: '', Mobile:''}} validationSchema={yup.object({ProductId: yup.number().required('Product ID is required').min(1, 'Product Id is Required'),
                          Name: yup.string().required('Name is Required').min(4, 'Name is too short').max(10,'Name too Lengthy'),
                          Mobile: yup.string().required('Mobile required').matches(/\+91\d{10}/, 'Invalid Mobile') 
                          })} onSubmit={(product)=>{console.log(product)}} >
              
              
                              {
                                 form => <Form>
                                  <dl>
                                      <dt>Product Id</dt>
                                      <dd><Field type="number" name="ProductId"/></dd>
                                      <dd className="text-danger"><ErrorMessage  name="ProductId" /></dd>
                                      <dt>Name</dt>
                                      <dd><Field type="text" name="Name"/></dd>
                                      <dd className="text-danger"><ErrorMessage  name="Name" /></dd>
                                      <dt>Mobile</dt>
                                      <dd><Field type="text" name="Mobile"/></dd>
                                      <dd className="text-danger"><ErrorMessage  name="Mobile" /></dd>
                                  </dl>
                                  <button className="me-2" disabled={!form.isValid} type="submit">Register</button>
                                  <button className={(form.dirty)?'d-inline':'d-none'}>Save</button>
                                  <div className={(form.isValid)?'d-none':'d-block'}>
                                  <h4>Please Check the Following Errors</h4>
                                  {
                                      Object.keys(form.errors).map(property=><li key={property}>{form.errors[property]}</li>)
                                  }
                                  </div>
                              </Form>
                              }
                          </Formik>
            </div>
        )
    }
}


                    Life Cycle Hook Methods

- 
