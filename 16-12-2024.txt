Summery
- Components
- Data Binding
- Class Binding
- Style Binding
- Event Binding
- Ajax Request [Axios]
- Forms & Validations [Formik, Yup, Hook Form]
- Controlled Components 
- Conditional Rendering




                        React Hooks


- Hook is a service.
- Service is a pre-defined business logic, which you can customize and implement according to requirements.
- Service enables

    a) Reusability
    b) Extensibility
    c) Maintainability
    d) Testability
    e) Security

- The components that control service Arguments

    a) Provider
    b) Injector
    c) Consumer

- Provider loads all dependencies into memory and locates the dependencies in memory.
- Injector is responsible for injecting a service into component.
- Consumer uses the service.
- Service uses "Dependency Injection Mechanism". [DI]
- Hook in React is a "Service".
- Technically hook is a function that returns specified functionality.


Rules:

- Hook must be a function.
- It can't be void type.
- It must return some value or function. [Currying]
- It can be parameterized or parameters less.
- It can have rest parameters.
- It can't be a generator function.
- It can use existing hooks with in the context.
- A hook can be configured and accessed only at high level.
- You can't configure a hook inside another function.

    function handleClick(){
        const [userName] = useState('');  // Invalid
    }

- You can't use hooks in a closure.
- You can't use in class components.
- Hook name must be in "camelCase".
- The prefix must start with "use" Keyword.



Custom Hooks:

- You can configure a custom Hook with some custom functionality and reuse in any application.
- Hooks are "Single ton" pattern, where an object is created for first request and the same is used across multiple requests.
- Function uses "Single Call" mechanism, where an object i created for every request.


EX:

hook/use-captcha.jsx



export function useCaptcha(){
    let code = ``;
    code = `${Math.round(Math.random()*10)} ${Math.round(Math.random()*10)}
        ${Math.round(Math.random()*10)} ${Math.round(Math.random()*10)}
        ${Math.round(Math.random()*10)} ${Math.round(Math.random()*10)}`;

        return code;
}


login.jsx

import { useCaptcha } from "./components/Hooks/use-captcha"

export function Login(){
    let code = useCaptcha();
    return(
        <div>
            <h3>User Login</h3>
            <dl>
                <dt>User Name</dt>
                <dd><input type="text" /></dd>
                <dt>Password</dt>
                <dd><input type="password" /></dd>
                <dt>Verify Code</dt>
                <dd>{code}</dd>
            </dl>
            <button>Login</button>
            
        </div>
    )
}


EX:

use-fetch.jsx

import { useEffect, useState } from "react";


export function useFetch(url){
    const [data, setData] = useState([]);

    useEffect(()=>{
        fetch(url).then(Response => Response.json()).then(data=>{
            setData(data);
        })
    }, [url]);

    return data;
}


hook-demo.jsx

import { useFetch } from "./use-fetch";

export function HookDemo(){
     let categories = useFetch('https://fakestoreapi.com/products/categories');
    
     return(
        <div>
            <h2>Categories</h2>
            <ol>
                {
                    categories.map(category=><li key={category}>{category}</li>)
                }
            </ol>
        </div>
     )
}



Task:

- Create a hook for sorting data.
- Create a hook for filtering data.
- Create a hook for change the case of string into "Title Case".


useSort(collection, boolean){

    }
    sort and return the collection , if Boolean true it must be in reverse order.

    useFilter(collection, searchString) {
   
    }
    search for the given string in collection and returns the matching records.

    useTitleCase(str)
    {
    }
    str = welcome to react;    => Welcome To React